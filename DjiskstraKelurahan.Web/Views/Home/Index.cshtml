@inject IKelurahanService KelurahanService

@model IndexVM

@{
    ViewData["Title"] = "Home Page";
    var daftarKelurahan = KelurahanService.GetAll();
}

<div class="card"></div>
<div class="row">
    <div class="col pr-0">
        <label class="form-label">Start</label>
        <select id="start" class="form-control select2">
            @foreach (var kelurahan in daftarKelurahan)
            {
                <option value="@kelurahan.Nama">@kelurahan.Nama</option>
            }
        </select>
    </div>
    <div class="col pr-0">
        <label class="form-label">End</label>
        <select id="end" class="form-control select2" multiple>
            @foreach (var kelurahan in daftarKelurahan)
            {
                <option value="@kelurahan.Nama">@kelurahan.Nama</option>
            }
        </select>
    </div>
</div>

<div class="row">
    <div class="col ml-3">
        Total Cost : <span id="cost"></span>
    </div>
    <div class="col ml-3">
        Jalur : <span id="path"></span>
    </div>
</div>

<div class="row">
    <div class="col my-3">
        <button class="btn btn-primary" id="djikstra">Djikstra</button>
    </div>
</div>

<hr >

<style>
    #map {
        width: 100%;
        height: 400px;
    }
</style>

<div id="map"></div>

@section Scripts {
    <partial name="_MapsApiPartial" />

    <script type="text/javascript">
        const selectStart = $("select#start");
        const selectEnd = $("select#end");
        const buttonDjikstra = $("button#djikstra");
        const spanCost = $("span#cost");
        const spanPath = $("span#path");
        let map;

        async function initMap() {
            let daftarKelurahan;
            let daftarEdges;

            const response = await fetch("/kelurahans");
            if (response.ok) {
                daftarKelurahan = await response.json();

                console.log(daftarKelurahan);
            }

            const responseEdge = await fetch("/kelurahans/edges");
            if (responseEdge.ok) {
                daftarEdges = await responseEdge.json();
                console.log(daftarEdges);
            }

            const pos = { lat: - 10.17696822001329, lng: 123.60338374889992 };

            const { Map } = await google.maps.importLibrary("maps");
            const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");

            // The map, centered at Uluru
            map = new Map(document.getElementById("map"), {
                zoom: 13,
                center: pos,
                mapId: "DEMO_MAP_ID"
            });

            // The marker, positioned at Uluru
            const markers = [];

            for (let kelurahan of daftarKelurahan) {
                const contentString =
                    '<div id="content">' +
                    '<div id="siteNotice">' +
                    "</div>" +
                    '<h1 id="firstHeading" class="firstHeading">Kantor Lurah ' + kelurahan.nama + '</h1>' +
                    '<div id="bodyContent">' +
                    "</div>" +
                    "</div>";

                const infoWindow = new google.maps.InfoWindow({
                    ariaLabel: kelurahan.nama,
                    content: contentString
                });

                const m = new AdvancedMarkerElement({
                    map: map,
                    position: { lat: kelurahan.koordinat.x, lng: kelurahan.koordinat.y },
                    title: kelurahan.nama
                });

                m.addListener("click", () => {
                    infoWindow.open({
                        anchor: m,
                        map
                    });
                });

                infoWindow.addListener("visible", () => infoWindow.focus());

                map.addListener("click", () => infoWindow.close());

                markers.push(m);
            }

            const polyLines = [];
            for (let edge of daftarEdges) {
                const line = [
                    { lat: edge.v1.value.koordinat.x, lng: edge.v1.value.koordinat.y },
                    { lat: edge.v2.value.koordinat.x, lng: edge.v2.value.koordinat.y }
                ];

                const p = new google.maps.Polyline({
                    path: line,
                });
                p.setMap(map);
                polyLines.push(p);
            }

            buttonDjikstra.on('click', async function() {
                const start = selectStart.val();
                const daftarKelurahan = ["Bonipoi", "Manulai 2", "Penfui", "Namosain"];

                const request = { Start: start, DaftarKelurahan: daftarKelurahan };
                const responsePath = await fetch("/kelurahans/final", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(request)
                });

                if (responsePath.ok) {
                    const result = await responsePath.json();
                    
                    console.log(result);

                    for (let line of polyLines) {
                        line.setMap(null);
                    }
                    
                    polyLines.length = 0;
                    let pathString = "";

                    for (let i = 1; i < result.path.length; i++) {
                        const kel1 = result.path[i - 1];
                        const kel2 = result.path[i];

                        const line = [
                            { lat: kel1.value.koordinat.x, lng: kel1.value.koordinat.y },
                            { lat: kel2.value.koordinat.x, lng: kel2.value.koordinat.y }
                        ];

                        const p = new google.maps.Polyline({
                            path: line,
                        });

                        p.setMap(map);
                        polyLines.push(p);

                        pathString += `${kel1.value.nama}`;
                        if (i != result.path.length - 1) {
                            pathString += " - ";
                        } else {
                            pathString += ` - ${kel2.value.nama}`;
                        }
                    }

                    spanCost.html(result.cost);
                    spanPath.html(pathString);
                }
            });
        }

        initMap();        
    </script>
    <script>
        $(document).ready(function () {
            $('.select2').select2({
                 // Tombol untuk menghapus pilihan
            });
        });
        $(document).ready(function () {
            // Hanya untuk elemen Select2 dengan atribut multiple
            $('select.select2[multiple]').select2({
                closeOnSelect: false,
                allowClear: true
            });
        });

    </script>
}